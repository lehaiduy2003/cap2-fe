<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/pages/LocationSearch.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/LocationSearch.css" />
              <option name="originalContent" value=".location-search-container {&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;  padding: 20px;&#10;  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;&#10;}&#10;&#10;.search-section {&#10;  background: white;&#10;  border-radius: 12px;&#10;  padding: 30px;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;  margin-bottom: 30px;&#10;}&#10;&#10;.search-section h1 {&#10;  margin: 0 0 20px 0;&#10;  color: #333;&#10;  font-size: 2rem;&#10;  text-align: center;&#10;}&#10;&#10;.search-input-group {&#10;  display: flex;&#10;  gap: 10px;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.location-input {&#10;  flex: 1;&#10;  padding: 12px 16px;&#10;  border: 2px solid #e1e5e9;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;  transition: border-color 0.3s ease;&#10;}&#10;&#10;.location-input:focus {&#10;  outline: none;&#10;  border-color: #007bff;&#10;  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);&#10;}&#10;&#10;.location-input:disabled {&#10;  background-color: #f8f9fa;&#10;  cursor: not-allowed;&#10;}&#10;&#10;.search-button {&#10;  padding: 12px 24px;&#10;  background-color: #007bff;&#10;  color: white;&#10;  border: none;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  cursor: pointer;&#10;  transition: background-color 0.3s ease;&#10;  min-width: 120px;&#10;}&#10;&#10;.search-button:hover:not(:disabled) {&#10;  background-color: #0056b3;&#10;}&#10;&#10;.search-button:disabled {&#10;  background-color: #6c757d;&#10;  cursor: not-allowed;&#10;}&#10;&#10;.error-message {&#10;  background-color: #f8d7da;&#10;  border: 1px solid #f5c6cb;&#10;  color: #721c24;&#10;  padding: 12px 16px;&#10;  border-radius: 8px;&#10;  margin-top: 10px;&#10;}&#10;&#10;.error-message p {&#10;  margin: 0;&#10;}&#10;&#10;.results-section {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 30px;&#10;}&#10;&#10;.location-info {&#10;  background: white;&#10;  border-radius: 12px;&#10;  padding: 25px;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.location-info h2 {&#10;  margin: 0 0 15px 0;&#10;  color: #28a745;&#10;  font-size: 1.5rem;&#10;}&#10;&#10;.location-details p {&#10;  margin: 8px 0;&#10;  font-size: 16px;&#10;  color: #555;&#10;}&#10;&#10;.location-details strong {&#10;  color: #333;&#10;}&#10;&#10;.nearby-places {&#10;  background: white;&#10;  border-radius: 12px;&#10;  padding: 25px;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.nearby-places h3 {&#10;  margin: 0 0 20px 0;&#10;  color: #333;&#10;  font-size: 1.3rem;&#10;}&#10;&#10;.places-grid {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));&#10;  gap: 20px;&#10;}&#10;&#10;.place-card {&#10;  border: 1px solid #e1e5e9;&#10;  border-radius: 8px;&#10;  padding: 20px;&#10;  background: #fafafa;&#10;  transition: transform 0.2s ease, box-shadow 0.2s ease;&#10;}&#10;&#10;.place-card:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;}&#10;&#10;.place-card h4 {&#10;  margin: 0 0 10px 0;&#10;  color: #333;&#10;  font-size: 1.1rem;&#10;  font-weight: 600;&#10;}&#10;&#10;.place-address {&#10;  color: #666;&#10;  font-size: 14px;&#10;  margin: 8px 0;&#10;  line-height: 1.4;&#10;}&#10;&#10;.place-details {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  margin: 12px 0;&#10;  flex-wrap: wrap;&#10;  gap: 8px;&#10;}&#10;&#10;.place-type {&#10;  background-color: #007bff;&#10;  color: white;&#10;  padding: 4px 8px;&#10;  border-radius: 4px;&#10;  font-size: 12px;&#10;  font-weight: 500;&#10;  text-transform: capitalize;&#10;}&#10;&#10;.place-rating {&#10;  font-size: 14px;&#10;  color: #ffa500;&#10;  font-weight: 600;&#10;}&#10;&#10;.place-distance {&#10;  color: #28a745;&#10;  font-size: 14px;&#10;  font-weight: 600;&#10;  margin: 8px 0 0 0;&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .location-search-container {&#10;    padding: 15px;&#10;  }&#10;&#10;  .search-input-group {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .search-button {&#10;    width: 100%;&#10;  }&#10;&#10;  .places-grid {&#10;    grid-template-columns: 1fr;&#10;  }&#10;&#10;  .search-section h1 {&#10;    font-size: 1.5rem;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value=".location-search-container {&#10;  max-width: 1200px;&#10;  margin: 0 auto;&#10;  padding: 20px;&#10;  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;&#10;}&#10;&#10;.search-section {&#10;  background: white;&#10;  border-radius: 12px;&#10;  padding: 30px;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;  margin-bottom: 30px;&#10;}&#10;&#10;.search-section h1 {&#10;  margin: 0 0 20px 0;&#10;  color: #333;&#10;  font-size: 2rem;&#10;  text-align: center;&#10;}&#10;&#10;.search-input-group {&#10;  display: flex;&#10;  gap: 10px;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.location-input {&#10;  flex: 1;&#10;  padding: 12px 16px;&#10;  border: 2px solid #e1e5e9;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;  transition: border-color 0.3s ease;&#10;}&#10;&#10;.location-input:focus {&#10;  outline: none;&#10;  border-color: #007bff;&#10;  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);&#10;}&#10;&#10;.location-input:disabled {&#10;  background-color: #f8f9fa;&#10;  cursor: not-allowed;&#10;}&#10;&#10;.search-button {&#10;  padding: 12px 24px;&#10;  background-color: #007bff;&#10;  color: white;&#10;  border: none;&#10;  border-radius: 8px;&#10;  font-size: 16px;&#10;  font-weight: 600;&#10;  cursor: pointer;&#10;  transition: background-color 0.3s ease;&#10;  min-width: 120px;&#10;}&#10;&#10;.search-button:hover:not(:disabled) {&#10;  background-color: #0056b3;&#10;}&#10;&#10;.search-button:disabled {&#10;  background-color: #6c757d;&#10;  cursor: not-allowed;&#10;}&#10;&#10;.error-message {&#10;  background-color: #f8d7da;&#10;  border: 1px solid #f5c6cb;&#10;  color: #721c24;&#10;  padding: 12px 16px;&#10;  border-radius: 8px;&#10;  margin-top: 10px;&#10;}&#10;&#10;.error-message p {&#10;  margin: 0;&#10;}&#10;&#10;/* New layout styles */&#10;.results-container {&#10;  display: flex;&#10;  gap: 20px;&#10;  height: 700px;&#10;}&#10;&#10;.map-section {&#10;  flex: 0 0 70%;&#10;  background: white;&#10;  border-radius: 12px;&#10;  padding: 20px;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;.location-info-header {&#10;  margin-bottom: 15px;&#10;  padding-bottom: 15px;&#10;  border-bottom: 1px solid #e1e5e9;&#10;}&#10;&#10;.location-info-header h2 {&#10;  margin: 0 0 8px 0;&#10;  color: #007bff;&#10;  font-size: 1.3rem;&#10;  font-weight: 600;&#10;}&#10;&#10;.location-info-header p {&#10;  margin: 0;&#10;  color: #666;&#10;  font-size: 14px;&#10;}&#10;&#10;.nearby-section {&#10;  flex: 0 0 30%;&#10;  background: white;&#10;  border-radius: 12px;&#10;  padding: 20px;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;  overflow: hidden;&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;.nearby-places {&#10;  height: 100%;&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;.nearby-places h3 {&#10;  margin: 0 0 20px 0;&#10;  color: #333;&#10;  font-size: 1.2rem;&#10;  font-weight: 600;&#10;}&#10;&#10;.places-list {&#10;  flex: 1;&#10;  overflow-y: auto;&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 12px;&#10;  padding-right: 8px;&#10;}&#10;&#10;.places-list::-webkit-scrollbar {&#10;  width: 6px;&#10;}&#10;&#10;.places-list::-webkit-scrollbar-track {&#10;  background: #f1f1f1;&#10;  border-radius: 3px;&#10;}&#10;&#10;.places-list::-webkit-scrollbar-thumb {&#10;  background: #c1c1c1;&#10;  border-radius: 3px;&#10;}&#10;&#10;.places-list::-webkit-scrollbar-thumb:hover {&#10;  background: #a8a8a8;&#10;}&#10;&#10;.place-card {&#10;  border: 2px solid #e1e5e9;&#10;  border-radius: 8px;&#10;  padding: 15px;&#10;  background: #fafafa;&#10;  transition: all 0.2s ease;&#10;  cursor: pointer;&#10;  display: flex;&#10;  gap: 12px;&#10;  align-items: flex-start;&#10;}&#10;&#10;.place-card:hover {&#10;  transform: translateY(-1px);&#10;  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);&#10;  border-color: #007bff;&#10;}&#10;&#10;.place-card.selected {&#10;  border-color: #007bff;&#10;  background: #f0f7ff;&#10;  box-shadow: 0 2px 8px rgba(0, 123, 255, 0.2);&#10;}&#10;&#10;.place-icon {&#10;  font-size: 20px;&#10;  min-width: 24px;&#10;  text-align: center;&#10;}&#10;&#10;.place-content {&#10;  flex: 1;&#10;  min-width: 0;&#10;}&#10;&#10;.place-card h4 {&#10;  margin: 0 0 6px 0;&#10;  color: #333;&#10;  font-size: 1rem;&#10;  font-weight: 600;&#10;  line-height: 1.2;&#10;}&#10;&#10;.place-address {&#10;  color: #666;&#10;  font-size: 12px;&#10;  margin: 4px 0 8px 0;&#10;  line-height: 1.3;&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 2;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;}&#10;&#10;.place-details {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  margin: 8px 0;&#10;  flex-wrap: wrap;&#10;  gap: 6px;&#10;}&#10;&#10;.place-type {&#10;  background-color: #007bff;&#10;  color: white;&#10;  padding: 2px 6px;&#10;  border-radius: 4px;&#10;  font-size: 10px;&#10;  font-weight: 500;&#10;  text-transform: capitalize;&#10;  white-space: nowrap;&#10;}&#10;&#10;.place-rating {&#10;  font-size: 12px;&#10;  color: #ffa500;&#10;  font-weight: 600;&#10;  white-space: nowrap;&#10;}&#10;&#10;.place-distance {&#10;  color: #28a745;&#10;  font-size: 12px;&#10;  font-weight: 600;&#10;  margin: 4px 0 0 0;&#10;}&#10;&#10;/* Info window styles */&#10;.info-window {&#10;  max-width: 250px;&#10;}&#10;&#10;.info-window h4 {&#10;  margin: 0 0 8px 0;&#10;  color: #333;&#10;  font-size: 14px;&#10;  font-weight: 600;&#10;}&#10;&#10;.info-window p {&#10;  margin: 4px 0;&#10;  font-size: 12px;&#10;  color: #666;&#10;}&#10;&#10;.info-details {&#10;  display: flex;&#10;  gap: 8px;&#10;  align-items: center;&#10;  margin: 8px 0;&#10;}&#10;&#10;/* Legacy styles - keeping for backward compatibility */&#10;.results-section {&#10;  display: flex;&#10;  flex-direction: column;&#10;  gap: 30px;&#10;}&#10;&#10;.location-info {&#10;  background: white;&#10;  border-radius: 12px;&#10;  padding: 25px;&#10;  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.location-info h2 {&#10;  margin: 0 0 15px 0;&#10;  color: #28a745;&#10;  font-size: 1.5rem;&#10;}&#10;&#10;.location-details p {&#10;  margin: 8px 0;&#10;  font-size: 16px;&#10;  color: #555;&#10;}&#10;&#10;.location-details strong {&#10;  color: #333;&#10;}&#10;&#10;.places-grid {&#10;  display: grid;&#10;  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));&#10;  gap: 20px;&#10;}&#10;&#10;@media (max-width: 1024px) {&#10;  .results-container {&#10;    flex-direction: column;&#10;    height: auto;&#10;  }&#10;&#10;  .map-section {&#10;    flex: none;&#10;    height: 500px;&#10;  }&#10;&#10;  .nearby-section {&#10;    flex: none;&#10;    height: 400px;&#10;  }&#10;}&#10;&#10;@media (max-width: 768px) {&#10;  .location-search-container {&#10;    padding: 15px;&#10;  }&#10;&#10;  .search-input-group {&#10;    flex-direction: column;&#10;  }&#10;&#10;  .search-button {&#10;    width: 100%;&#10;  }&#10;&#10;  .results-container {&#10;    gap: 15px;&#10;  }&#10;&#10;  .map-section,&#10;  .nearby-section {&#10;    padding: 15px;&#10;  }&#10;&#10;  .map-section {&#10;    height: 400px;&#10;  }&#10;&#10;  .nearby-section {&#10;    height: 300px;&#10;  }&#10;&#10;  .search-section h1 {&#10;    font-size: 1.5rem;&#10;  }&#10;&#10;  .place-card {&#10;    padding: 12px;&#10;  }&#10;&#10;  .place-icon {&#10;    font-size: 18px;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/pages/LocationSearch.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/pages/LocationSearch.jsx" />
              <option name="originalContent" value="import React, { useState } from 'react';&#10;import { axiosInstance } from '../lib/axios';&#10;import './LocationSearch.css';&#10;&#10;const LocationSearch = () =&gt; {&#10;  const [address, setAddress] = useState('');&#10;  const [loading, setLoading] = useState(false);&#10;  const [locationData, setLocationData] = useState(null);&#10;  const [error, setError] = useState('');&#10;&#10;  const handleSearch = async () =&gt; {&#10;    if (!address.trim()) {&#10;      setError('Please enter a location');&#10;      return;&#10;    }&#10;&#10;    setLoading(true);&#10;    setError('');&#10;    setLocationData(null);&#10;&#10;    try {&#10;      const response = await axiosInstance.post('/maps/locations', {&#10;        address: address.trim()&#10;      });&#10;&#10;      if (response.data.status === 'SUCCESS') {&#10;        setLocationData(response.data);&#10;      } else {&#10;        setError(response.data.message || 'Failed to search location');&#10;      }&#10;    } catch (err) {&#10;      console.error('Search error:', err);&#10;      setError(err.response?.data?.message || 'An error occurred while searching');&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleKeyPress = (e) =&gt; {&#10;    if (e.key === 'Enter') {&#10;      handleSearch();&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;location-search-container&quot;&gt;&#10;      &lt;div className=&quot;search-section&quot;&gt;&#10;        &lt;h1&gt;Location Search&lt;/h1&gt;&#10;        &lt;div className=&quot;search-input-group&quot;&gt;&#10;          &lt;input&#10;            type=&quot;text&quot;&#10;            value={address}&#10;            onChange={(e) =&gt; setAddress(e.target.value)}&#10;            onKeyPress={handleKeyPress}&#10;            placeholder=&quot;Enter physical location (e.g., 123 Main St, New York)&quot;&#10;            className=&quot;location-input&quot;&#10;            disabled={loading}&#10;          /&gt;&#10;          &lt;button&#10;            onClick={handleSearch}&#10;            disabled={loading || !address.trim()}&#10;            className=&quot;search-button&quot;&#10;          &gt;&#10;            {loading ? 'Searching...' : 'Search'}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;error-message&quot;&gt;&#10;            &lt;p&gt;{error}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {locationData &amp;&amp; (&#10;        &lt;div className=&quot;results-section&quot;&gt;&#10;          &lt;div className=&quot;location-info&quot;&gt;&#10;            &lt;h2&gt;Location Found&lt;/h2&gt;&#10;            &lt;div className=&quot;location-details&quot;&gt;&#10;              &lt;p&gt;&lt;strong&gt;Address:&lt;/strong&gt; {locationData.location.formattedAddress}&lt;/p&gt;&#10;              &lt;p&gt;&lt;strong&gt;Coordinates:&lt;/strong&gt; {locationData.location.latitude.toFixed(6)}, {locationData.location.longitude.toFixed(6)}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {locationData.nearbyPlaces &amp;&amp; locationData.nearbyPlaces.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;nearby-places&quot;&gt;&#10;              &lt;h3&gt;Nearby Places (within 2km)&lt;/h3&gt;&#10;              &lt;div className=&quot;places-grid&quot;&gt;&#10;                {locationData.nearbyPlaces.map((place, index) =&gt; (&#10;                  &lt;div key={index} className=&quot;place-card&quot;&gt;&#10;                    &lt;h4&gt;{place.name}&lt;/h4&gt;&#10;                    &lt;p className=&quot;place-address&quot;&gt;{place.address}&lt;/p&gt;&#10;                    &lt;div className=&quot;place-details&quot;&gt;&#10;                      &lt;span className=&quot;place-type&quot;&gt;{place.type.replace(/_/g, ' ')}&lt;/span&gt;&#10;                      {place.rating &gt; 0 &amp;&amp; (&#10;                        &lt;span className=&quot;place-rating&quot;&gt;⭐ {place.rating.toFixed(1)}&lt;/span&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                    &lt;p className=&quot;place-distance&quot;&gt;&#10;                      {place.distanceInMeters &lt; 1000&#10;                        ? `${Math.round(place.distanceInMeters)}m away`&#10;                        : `${(place.distanceInMeters / 1000).toFixed(1)}km away`&#10;                      }&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default LocationSearch;&#10;" />
              <option name="updatedContent" value="import { useState } from 'react';&#10;import { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api';&#10;import { axiosInstance } from '../lib/axios';&#10;import './LocationSearch.css';&#10;&#10;const LocationSearch = () =&gt; {&#10;  const [address, setAddress] = useState('');&#10;  const [loading, setLoading] = useState(false);&#10;  const [locationData, setLocationData] = useState(null);&#10;  const [error, setError] = useState('');&#10;  const [selectedPlace, setSelectedPlace] = useState(null);&#10;&#10;  // Google Maps configuration&#10;  const mapContainerStyle = {&#10;    width: '100%',&#10;    height: '600px'&#10;  };&#10;&#10;  const defaultCenter = {&#10;    lat: 10.762622, // Ho Chi Minh City default&#10;    lng: 106.660172&#10;  };&#10;&#10;  const handleSearch = async () =&gt; {&#10;    if (!address.trim()) {&#10;      setError('Please enter a location');&#10;      return;&#10;    }&#10;&#10;    setLoading(true);&#10;    setError('');&#10;    setLocationData(null);&#10;    setSelectedPlace(null);&#10;&#10;    try {&#10;      const response = await axiosInstance.post('/maps/locations', {&#10;        address: address.trim()&#10;      });&#10;&#10;      if (response.data.status === 'SUCCESS') {&#10;        setLocationData(response.data);&#10;      } else {&#10;        setError(response.data.message || 'Failed to search location');&#10;      }&#10;    } catch (err) {&#10;      console.error('Search error:', err);&#10;      setError(err.response?.data?.message || 'An error occurred while searching');&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleKeyDown = (e) =&gt; {&#10;    if (e.key === 'Enter') {&#10;      handleSearch();&#10;    }&#10;  };&#10;&#10;  const getMapCenter = () =&gt; {&#10;    if (locationData?.location) {&#10;      return {&#10;        lat: locationData.location.latitude,&#10;        lng: locationData.location.longitude&#10;      };&#10;    }&#10;    return defaultCenter;&#10;  };&#10;&#10;  const getPlaceIcon = (type) =&gt; {&#10;    const iconMap = {&#10;      restaurant: '️',&#10;      school: '',&#10;      hospital: '',&#10;      bank: '',&#10;      gas_station: '⛽',&#10;      pharmacy: '',&#10;      supermarket: '',&#10;      default: ''&#10;    };&#10;    return iconMap[type] || iconMap.default;&#10;  };&#10;&#10;  const handlePlaceCardClick = (place) =&gt; {&#10;    setSelectedPlace(place);&#10;  };&#10;&#10;  const handlePlaceCardKeyDown = (e, place) =&gt; {&#10;    if (e.key === 'Enter' || e.key === ' ') {&#10;      e.preventDefault();&#10;      setSelectedPlace(place);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;location-search-container&quot;&gt;&#10;      &lt;div className=&quot;search-section&quot;&gt;&#10;        &lt;h1&gt;Location Search&lt;/h1&gt;&#10;        &lt;div className=&quot;search-input-group&quot;&gt;&#10;          &lt;input&#10;            type=&quot;text&quot;&#10;            value={address}&#10;            onChange={(e) =&gt; setAddress(e.target.value)}&#10;            onKeyDown={handleKeyDown}&#10;            placeholder=&quot;Enter physical location (e.g., 123 Main St, New York)&quot;&#10;            className=&quot;location-input&quot;&#10;            disabled={loading}&#10;            aria-label=&quot;Location search input&quot;&#10;          /&gt;&#10;          &lt;button&#10;            onClick={handleSearch}&#10;            disabled={loading || !address.trim()}&#10;            className=&quot;search-button&quot;&#10;            aria-label=&quot;Search location&quot;&#10;          &gt;&#10;            {loading ? 'Searching...' : 'Search'}&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;error-message&quot;&gt;&#10;            &lt;p&gt;{error}&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {locationData &amp;&amp; (&#10;        &lt;div className=&quot;results-container&quot;&gt;&#10;          &lt;div className=&quot;map-section&quot;&gt;&#10;            &lt;div className=&quot;location-info-header&quot;&gt;&#10;              &lt;h2&gt; {locationData.location.formattedAddress}&lt;/h2&gt;&#10;              &lt;p&gt;Coordinates: {locationData.location.latitude.toFixed(6)}, {locationData.location.longitude.toFixed(6)}&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;LoadScript googleMapsApiKey={import.meta.env.VITE_GOOGLE_MAPS_API_KEY || 'YOUR_API_KEY'}&gt;&#10;              &lt;GoogleMap&#10;                mapContainerStyle={mapContainerStyle}&#10;                center={getMapCenter()}&#10;                zoom={15}&#10;                options={{&#10;                  zoomControl: true,&#10;                  streetViewControl: false,&#10;                  mapTypeControl: false,&#10;                  fullscreenControl: true,&#10;                }}&#10;              &gt;&#10;                {/* Main location marker */}&#10;                &lt;Marker&#10;                  position={getMapCenter()}&#10;                  icon={{&#10;                    url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`&#10;                      &lt;svg width=&quot;40&quot; height=&quot;40&quot; viewBox=&quot;0 0 40 40&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&#10;                        &lt;circle cx=&quot;20&quot; cy=&quot;20&quot; r=&quot;18&quot; fill=&quot;#007bff&quot; stroke=&quot;white&quot; stroke-width=&quot;4&quot;/&gt;&#10;                        &lt;circle cx=&quot;20&quot; cy=&quot;20&quot; r=&quot;8&quot; fill=&quot;white&quot;/&gt;&#10;                      &lt;/svg&gt;&#10;                    `),&#10;                    scaledSize: new window.google.maps.Size(40, 40),&#10;                  }}&#10;                  title=&quot;Searched Location&quot;&#10;                /&gt;&#10;&#10;                {/* Nearby places markers */}&#10;                {locationData.nearbyPlaces?.map((place) =&gt; (&#10;                  &lt;Marker&#10;                    key={`${place.latitude}-${place.longitude}-${place.name}`}&#10;                    position={{&#10;                      lat: place.latitude,&#10;                      lng: place.longitude&#10;                    }}&#10;                    onClick={() =&gt; setSelectedPlace(place)}&#10;                    icon={{&#10;                      url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`&#10;                        &lt;svg width=&quot;30&quot; height=&quot;30&quot; viewBox=&quot;0 0 30 30&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&#10;                          &lt;circle cx=&quot;15&quot; cy=&quot;15&quot; r=&quot;13&quot; fill=&quot;#28a745&quot; stroke=&quot;white&quot; stroke-width=&quot;3&quot;/&gt;&#10;                          &lt;text x=&quot;15&quot; y=&quot;20&quot; text-anchor=&quot;middle&quot; fill=&quot;white&quot; font-size=&quot;12&quot; font-weight=&quot;bold&quot;&gt;&#10;                            ${getPlaceIcon(place.type)}&#10;                          &lt;/text&gt;&#10;                        &lt;/svg&gt;&#10;                      `),&#10;                      scaledSize: new window.google.maps.Size(30, 30),&#10;                    }}&#10;                    title={place.name}&#10;                  /&gt;&#10;                ))}&#10;&#10;                {/* Info window for selected place */}&#10;                {selectedPlace &amp;&amp; (&#10;                  &lt;InfoWindow&#10;                    position={{&#10;                      lat: selectedPlace.latitude,&#10;                      lng: selectedPlace.longitude&#10;                    }}&#10;                    onCloseClick={() =&gt; setSelectedPlace(null)}&#10;                  &gt;&#10;                    &lt;div className=&quot;info-window&quot;&gt;&#10;                      &lt;h4&gt;{selectedPlace.name}&lt;/h4&gt;&#10;                      &lt;p&gt;{selectedPlace.address}&lt;/p&gt;&#10;                      &lt;div className=&quot;info-details&quot;&gt;&#10;                        &lt;span className=&quot;place-type&quot;&gt;{selectedPlace.type.replace(/_/g, ' ')}&lt;/span&gt;&#10;                        {selectedPlace.rating &gt; 0 &amp;&amp; (&#10;                          &lt;span className=&quot;place-rating&quot;&gt;⭐ {selectedPlace.rating.toFixed(1)}&lt;/span&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                      &lt;p className=&quot;place-distance&quot;&gt;&#10;                        {selectedPlace.distanceInMeters &lt; 1000&#10;                          ? `${Math.round(selectedPlace.distanceInMeters)}m away`&#10;                          : `${(selectedPlace.distanceInMeters / 1000).toFixed(1)}km away`&#10;                        }&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/InfoWindow&gt;&#10;                )}&#10;              &lt;/GoogleMap&gt;&#10;            &lt;/LoadScript&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;nearby-section&quot;&gt;&#10;            {locationData.nearbyPlaces &amp;&amp; locationData.nearbyPlaces.length &gt; 0 &amp;&amp; (&#10;              &lt;div className=&quot;nearby-places&quot;&gt;&#10;                &lt;h3&gt;Nearby Places (within 2km)&lt;/h3&gt;&#10;                &lt;div className=&quot;places-list&quot;&gt;&#10;                  {locationData.nearbyPlaces.map((place, index) =&gt; (&#10;                    &lt;div &#10;                      key={`place-${place.latitude}-${place.longitude}-${place.name}-${index}`}&#10;                      className={`place-card ${selectedPlace === place ? 'selected' : ''}`}&#10;                      onClick={() =&gt; handlePlaceCardClick(place)}&#10;                      onKeyDown={(e) =&gt; handlePlaceCardKeyDown(e, place)}&#10;                      role=&quot;button&quot;&#10;                      tabIndex={0}&#10;                      aria-label={`Select ${place.name}`}&#10;                    &gt;&#10;                      &lt;div className=&quot;place-icon&quot;&gt;{getPlaceIcon(place.type)}&lt;/div&gt;&#10;                      &lt;div className=&quot;place-content&quot;&gt;&#10;                        &lt;h4&gt;{place.name}&lt;/h4&gt;&#10;                        &lt;p className=&quot;place-address&quot;&gt;{place.address}&lt;/p&gt;&#10;                        &lt;div className=&quot;place-details&quot;&gt;&#10;                          &lt;span className=&quot;place-type&quot;&gt;{place.type.replace(/_/g, ' ')}&lt;/span&gt;&#10;                          {place.rating &gt; 0 &amp;&amp; (&#10;                            &lt;span className=&quot;place-rating&quot;&gt;⭐ {place.rating.toFixed(1)}&lt;/span&gt;&#10;                          )}&#10;                        &lt;/div&gt;&#10;                        &lt;p className=&quot;place-distance&quot;&gt;&#10;                          {place.distanceInMeters &lt; 1000&#10;                            ? `${Math.round(place.distanceInMeters)}m away`&#10;                            : `${(place.distanceInMeters / 1000).toFixed(1)}km away`&#10;                          }&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default LocationSearch;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>